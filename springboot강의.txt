===================================
Gof의 디자인 패턴
===================================
1. 생성패턴
싱글톤(Singleton) : 한 클래스마다 인스턴스를 하나만 생성하여 어디서든 참조

2. 구조패턴
어댑터(Adapter) : 클래스의 인터페이스를 어떤 클래스에서든 이용할 수 있도록 변환
브리지(Bridge)  : 구현부에서 추상층을 분리하여 각자 독립적으로 변형하고 확장할 수 있도록 함
데코레이터(Decorator) : 주어진 상황에 따라 객체에 다른 객체를 덧붙임
파사드(Facade)  : 서브 시스템에 있는 인터페이스 집합에 대해 통합된 인터페이스 제공

3. 행동패턴
전략(Strategy)  : 동일 계열의 알고리즘군을 정의하고 캡슐화하여 상호 교환이 가능하게 함
===================================
REST API

REST 란?
REST는 Representational State Transfer의 줄임말
자원의 이름으로 구분하여 해당 자원의 상태를 교환하는 것을 의미
REST는 서버와 클라이언트의 통신 방식 중 하나

HTTP Method : Create, Read, Update, Delete

===================================
pom.xml Project Object Model
===================================

@RestController

Spring Framework 4이상버전
@Controller에@ResponseBody가 결합된 어노테이션
컨트롤러 클래스 하위 메소드에 @ResponseBody 어노테이션을 붙이지 않아도 문자열과 JSON등을 전송할 수 있음.

@RequestMapping
클래스와 메소드의 RequstMapping을 통해 URL을 매핑하여 경로를 설정하여 해당 메소드에서 처리
value : url 설정
method : GET, POST, DELETE, PUT, PATCH 등

스프링 4.3이상
@GetMapping
@PostMapping
@DeleteMapping
@PupMapping
@PatchMapping

크롬 확장 프로그램 :  Talend API Tester - Free Edition

----------------------------------
@RequestMapping(value="/hello", method=RequestMethod.GET)
@RequestMapping 고전적인 방법으로 사용하지 않음
----------------------------------
@GetMapping : 별도의 파라미터 없이 GET API를 호출하는 경우 사용되는 방법
@PathVariable : GET형식으 요청에서 파라미터를 전달하기 위해 URL에 값을 담아 요청하는 방법

@GetMapping(value="/variable1/{variable}")
public String getVariable1(@PathVariable String variable){
    return variable;
}

//@RequestParam : '?'를 기준으로 우측에 {키}={값}의 형태로 전달
//http://localhost:8080/request1?name=aaa&email=aaa.gmail.com&organization=aaagnd
@GetMapping(value="/request1")
public String getRequest1Param1(
    @RequestParam String name,
    @RequestParam String email,
    @RequestParam String organization){
    return name+" "+email+" "+organization;
}

----------------------------------
Swagger
----------------------------------
서버로 요청되는 API리스트를 HTML화면으로 문서화하여 테스트 할수 있는 라이브러리

설정방법
@Configuration : 어노테이션 기반의 환경 구성을 돕는 어노테이션
                 Ioc Container에게 해당 클래스를 Bean 구성 Class임을 알려줌
@Bean           : 개발자가 직접 제어가 불가능한 외부 라이브러 등을 Bean으로 만들 경우에 사용
----------------------------------
pom.xml 추가
----------------------------------
swagger 3.0.0 은 아래 의존성만 추가시킨다.

        <!-- https://mvnrepository.com/artifact/io.springfox/springfox-boot-starter -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>2.1.0</version>
		</dependency>
----------------------------------
application.properties 추가
----------------------------------
#swagger
spring.mvc.pathmatch.matching-strategy=ant-path-matcher
# swagger-ui custom path
springdoc.swagger-ui.path=/swagger-ui.html
# /api-docs endpoint custom path
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.tryItOutEnabled=true
springdoc.swagger-ui.filter=true
me.albymong.dev-url=http://localhost:8080
me.albymong.prod-url=https://bezkoder-api.com

/config/OpenAPIConfig.java 생성

-----------------------------
Lombok 이란?
-----------------------------
반복되는 메소드를 Annotation을 사용하여 자동으로 작성해주는 라이브러리
일반적으로 VO, DTO, Model, Entity 등의 데이터 클래스에서 주로 사용
대표적으로 많이 사용
@Getter
@Setter
@NoArgConstructor:파라미터가 없는 생성자를 생성
@AllArgConstructor:모든 필드값을 파라미터로 갖는 생성자를 생성
@RequiredArgsConstructor:필드값 중 final이나 @NotNull인 값을 갖는 생성자를 생성
@ToString:toString 메소드를 자동으로 생성해주는 기능
    @ToString(exclude="email") //제외할 항목설정 가능
@EqualsAndHashCode
    equals : 두 객체의 내용이 같은지 동등성(equality)를 비교하는 연산자
    hashCode : 두 객체가 같은 객체인지 동일성(identity)를 비교하는 연산자
    callSuper 속성을 통해 메소드 생성시 보모 클래스의 필드까지 고려할지 여부 설정 가능
     - callSuper = true //부모 클래스 필드 값들도 동일한지 체크
@Data
----------------------------------
pom.xml 추가
----------------------------------
		<dependency><!-- 메소드들을 어노테이션으로 대체하는 기능 -->
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
-----------------------------
DTO, DAO, Repository, Entity
-----------------------------
       DTO              DTO           Entity       Entity
Client <-->  Controller <-->  Service  <-->   DAO   <-->    DB
                               
                            ServiceImpl      DAOImpl

Entity(Domain)
    데이터베이스에 쓰일 컬럼과 여러 엔티티 간의 연관관계를 정의
    데이터베이스의 테이블을 하나의 엔티티로 생각해도 무방함
    실제 데이터베이스의 테이블과 1:1로 매핑됨
    이 클래스의 필드는 각 테이블 내부의 컬럼을 의미
DAO
Repository
    Entity에 의해 생성된 데이터베이스에 접근하는 메소드를 사용하기 위한 인터페이스
    Service와 DB를 연결하는 고리의 역할을 수행
    데이터베이스에 적용하고자 하는 CRUD를 정의하는 영역
DAO(Data Access Object)
    데이터베이스에 접근하는 객체를 의미(Persistance Layer)
    Service가 DB에 연결할 수 있게 해주는 역할
    DB를 사용하여 데이터를 조회하거나 조작하는 기능을 전담

DTO(Data Transfer Object)
    DTO는 VO(Value Object)로 불리기도 하며, 계층간 데이터 교환을 위한 객체를 의미
    VO의 경우 Read Only의 개념을 가지고 있음

-----------------------------
ORM(Object Relational Mapping)
-----------------------------
어플리케이션의 객체와 관계형 데이터베이스의 데이터를 자동으로 매핑해주는 것을 의미
-Java의 데이터 클래스와 관계형 데이터베이스의 테이블을 매핑
객체지향 프로그래밍과 관계형 데이터베이스의 차리로 발생하는 제약사항을 해결해주는 역할을 수행
대표적으로 JPA, Hibernate등이 있음(Persistent API)

장점
SQL 쿼리가 아닌 직관적인 코드로 데이터를 조작할 수 있음.
재사용 및 유지보수가 편리
DBMS에 대한 종속성이 줄어듬
단점
복잡성이 커질 경우 ORM만으로 구현하기 어려움
잘못 구현할 경우 속도 저하 발생
대형 쿼리는 별도의 튜닝이 필요할 수 있음.

-----------------------------
JPA(Java Persistance API)
-----------------------------
JPA는 java Persistance API의 줄임말이며, ORM과 관련된 인터페이스의 모음
Java 진영에서 표준 ORM으로 채택되어 있음
ORM이 큰개념이라고 하면, JPA는 더 구체화 시킨 스펙을 포함하고 있음
-----------------------------
Hibernate
-----------------------------
ORM Framework 중하나
JPA의 실제 구현체 중 하나이며, 현재 JPA 구현체중 가장 많이 사용됨
-----------------------------
Spring Data JPA
-----------------------------
Spring Framework에서 JPA를 편리하게 사용할 수 있게 지원하는 라이브러리
Hibernate에서 자주 사용되는 기능을 조금 더 쉽게 사용할 수 있게 구현

3:34:42

//사용하면 의존션 문제가 발생
//import javax.persistence.Entity;
//import javax.persistence.Id;
//import javax.persistence.Table;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

4:04:49
유효성 검사/데이터검증 Validation
Bean Validation / Hibernate Validation (Spring Boot 채택)
Hibernate Validation (Spring Boot 채택)
@Size : 문자의 길이 조건
@NotNull : null값 불가
@NotEmpty : @NotNull + ""값 불가
@NotBlank : @NotEmpty + ""값 불가

@Past : 과거날짜
@PastOrPresent : @Past + 오늘날짜
@Future : 미래날짜
@FutureOrPresent : @Future + 오늘날짜

@Pattern : 정규식을 통한 조건

@Max : 최대값 조건 설정
@Min : 최소값 조건 설정
@AssertTrue / AssertFalse : 참/거짓 조건 설정

@Valid : 해당 객체의 유효성 검사

-----------------------------
예외처리(Exception)
-----------------------------
스프링 부트의 예외 처리 방식
@ControllerAdvice로 모든 컨트롤로에서 발생할 예외를 정의하고,
@ExceptionHandler를 통해 발생하는 예외마다 처리할 메소드를 정의

RuntimeException은 Unchecked Exception, 그외 Checked Exception

Checked Exception
    반드시 예외 처리 필요
    컴파일 단계
    롤백하지 않음
    IOException, SQLException

Unchecked Exception
    명시적 처리 강제하지 않음
    실행중 단계
    롤백함
    NullPointerException, IllegalArgumentException, IndexOutOfBoundException, SsystemException

@ControllerAdvice
@RestControllerAdvice

@RestControllerAdvice(basePackage = "me.albymong")

예외 발생 시 json형태로 결과를 반환하기 위해서는 @RestControllerAdvice를 사용하면 됨

@ExceptionHandler
예외처리 상황이 발생하면 해당 Handler로 처리하겠다고 명시하는 어노테이션
@ExceptionHandler(OOExcption.class)


-----------------------------
Custom Exception
-----------------------------

HttpStatus 는 Enum 클래스임
Enum Class
    서로 관련 있는 상수들을 모아 심볼릭한 명칭의 집합으로 정의한 것
    클래스 처럼 보이게 하는 상수

-----------------------------
Rest Template 4:57:28
-----------------------------
Method          HTTP        설명
getForObject    GET         GET형식으로 요청하여 객체로 결과를 반환 받음
getForEntity    GET         GET형식으로 요청하여 ResponseEntity로 결과를 반환 받음
postForObject   POST        POST형식으로 요청하여 객체로 결과를 반환 받음
postForEntity   POST        POST형식으로 요청하여 ResponseEntity로 결과를 반환 받음
delete          DELETE      DELETE형식으로 요청
put             PUT         PUT형식으로 요청
patchForObject  PATCH       PATCH형식으로 요청
exchange        any         HTTP 헤더를 생성하여 추가할 수 있고 어떤 형식에서도 사용할 수 있음


-----------------------------
JUnit 5:12:00
-----------------------------
TDD에 대한 정리
    테스트 주도 개발이라는 의미를 가짐

단위 테스트(Unit Test)를 위한 도구를 제공
어노테이션을 기반으로 테스트를 지원
단정문 Assert 으로 테스트 케이스의 기대값에 대해 수행 결과를 확인할 수 있음.

모듈
JUnit Jupiter : 개발자가 테스트 코드를 작성할 때 사용
Junit Platform : 테스트를 실행하기 위한 뼈대
Junit Vintage : TestEngine API구현체

JUnit LifeCycle Annotation
@Test           테스트용 메소드를 표현하는 어노테이션
@BeforEach      각 테스트 메소드가 시작된기 전에 실행되어야 하는 메소드를 표현
@AfterEach      각 테스트 메소드가 시작된 후 실행되어야 하는 메소드를 표현
@BeforAll       테스트 시작 전에 실행되어야 하는 메소드를 표현(static 처리 필요)
@AfterAll       테스트 종료 후에 실행되어야 하는 메소드를 표현(static 처리 필요)


@SpringBootTest     : 통합테스트 용도로 사용됨
@ExtendWith         : 메인으로 사용된 Unit을 지정할 수 있음
@WebMvcTest(Class명.class)  
@AutoWired about Mockbean
@MockBean           : 테스트할 클래스에서 주입받고 있는 객체에 대해 가짜 객체를 생성해주는 어노테이션
@AutoConfigureMockMvc : MockMvc의 의존성을 자동으로 주입
@import

F.I.R.S.T 원칙
Fast
Independent
Repeatable
Self-Validating
Timely


-----------------------------
테스트 커버리지 확인하기 5:50:35
-----------------------------
소프트웨어의 테스트 수준이 충분한지 표현할 수 있는 지표 중 하나

jacoco란?
Java 코드의 커버리지를 체크하는 라이브러리
블랙 박스 테스트
화이트 박스 테스트

-----------------------------
1.스프링 vs 2.스프링부트
-----------------------------
의존성 주입 DI, Dependency Injection
1.
    private MyService service = new MyService();

2. 
    MyService myService;
    @AutoWired
    public DIController(MyService myService){
        this.myService = myService;
    }

관점 지향 프로그래밍(AOP, Aspect Oriented Programming)
OOP를 보완하는 수단으로, 여러 곳에 쓰이는 공통 기능을 모듈화하여 필요한 곳에 연결함으로써
유지보수 또는 재상용에 용이하도록 하는것을 의미

스프링부트는 단지 실행만 하면 되는 스프링 기반의 어플리케이션을 쉽게 만들 수 있다.
자동설정을 이용
모니터링 관리를 위한 스프링 액추에어서 제공

스프링 부트 프로젝트의 starter 디펜던시
spring-boot-starter-web-service : SOAP 웹 서비스
spring-boot-starter-web : RESTful 응용 프로그램
spring-boot-starter-test : 단위 테스트, 통합 테스트
spring-boot-starter-jdbc : 기본적인 JDBC
spring-boot-starter-security : 스프링 시큐리티(인증,권한)
spring-boot-starter-data-jpa : Spring Data JPA (Hibernate)
spring-boot-starter-cache : 캐시






